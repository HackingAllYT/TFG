
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import OptionMenu, Tk, Canvas, Entry, Text, Button, PhotoImage, StringVar, ttk, LEFT

import tkinter as tk
import tkinter.filedialog as fd
from tkinter.messagebox import showinfo, askyesno


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def select_path():
    filetypes = (
        ('Comma-separated values', '*.csv'),
        ('All files', '*.*')
    )

    filename = fd.askopenfilenames(
        title='Open a file',
        initialdir='/',
        filetypes=filetypes)

    showinfo(
        title='Selected File',
        message=filename
    )


def confirmExit():
    answer = askyesno(title='Saír?',
                      message='Está seguro que quere pechar?')
    if answer:
        window.destroy()


def display_selected(choice):
    choice = variable.get()
    print(choice)


window = Tk()

window.title('Aplicación para a visualización de datos de servidores NUMA')

window.geometry("1024x720")
window.configure(bg="#FFFFFF")

canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=720,
    width=1024,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)
canvas.create_rectangle(
    0.0,
    0.0,
    1024.0,
    55.0,
    fill="#7CAEFF",
    outline="")

canvas.create_rectangle(
    36.0,
    121.0,
    286.0,
    196.0,
    fill="#F1F5FF",
    outline="")

canvas.create_text(
    57.0,
    125.0,
    anchor="nw",
    text="Columnas:",
    fill="#000000",
    font=("Inter", 15 * -1)
)

canvas.create_rectangle(
    36.0,
    453.0,
    286.0,
    528.0,
    fill="#F1F5FF",
    outline="")

canvas.create_text(
    57.0,
    460.0,
    anchor="nw",
    text="G-FLOPS:",
    fill="#000000",
    font=("Inter", 15 * -1)
)

canvas.create_rectangle(
    384.0,
    453.0,
    634.0,
    528.0,
    fill="#F1F5FF",
    outline="")

canvas.create_text(
    408.0,
    460.0,
    anchor="nw",
    text="Rango inicial:",
    fill="#000000",
    font=("Inter", 15 * -1)
)

canvas.create_rectangle(
    737.0,
    453.0,
    987.0,
    528.0,
    fill="#F1F5FF",
    outline="")

canvas.create_text(
    758.0,
    460.0,
    anchor="nw",
    text="Rango final:",
    fill="#000000",
    font=("Inter", 15 * -1)
)

canvas.create_rectangle(
    384.0,
    285.0,
    634.0,
    360.0,
    fill="#F1F5FF",
    outline="")

canvas.create_text(
    405.0,
    289.0,
    anchor="nw",
    text="PIDs:",
    fill="#000000",
    font=("Inter", 15 * -1)
)

canvas.create_rectangle(
    36.0,
    285.0,
    286.0,
    360.0,
    fill="#F1F5FF",
    outline="")

canvas.create_text(
    57.0,
    289.0,
    anchor="nw",
    text="CPUs:",
    fill="#000000",
    font=("Inter", 15 * -1)
)

canvas.create_rectangle(
    737.0,
    285.0,
    987.0,
    360.0,
    fill="#F1F5FF",
    outline="")

canvas.create_text(
    755.0,
    289.0,
    anchor="nw",
    text="TIDs:",
    fill="#000000",
    font=("Inter", 15 * -1)
)

canvas.create_rectangle(
    384.0,
    121.0,
    634.0,
    196.0,
    fill="#F1F5FF",
    outline="")

canvas.create_text(
    408.0,
    124.0,
    anchor="nw",
    text="Tipo de datos:",
    fill="#000000",
    font=("Inter", 15 * -1)
)

canvas.create_rectangle(
    737.0,
    121.0,
    987.0,
    196.0,
    fill="#F1F5FF",
    outline="")

canvas.create_text(
    757.7142944335938,
    125.0,
    anchor="nw",
    text="Outliers:",
    fill="#000000",
    font=("Inter", 15 * -1)
)


button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=787.0,
    y=608.0,
    width=180.0,
    height=55.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=confirmExit,
    relief="flat"
)
button_2.place(
    x=390.0,
    y=1.0,
    width=180.0,
    height=53.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=200.0,
    y=1.0,
    width=180.0,
    height=53.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=select_path,
    relief="flat"
)
button_4.place(
    x=10.0,
    y=1.0,
    width=180.0,
    height=53.0
)


countries = ['Bahamas', 'Canada', 'Cuba', 'United States']


'''
***************************************************************************
'''
'''aux = StringVar()
aux_cb = ttk.Combobox(window, textvariable=aux, width=28)

# get first 3 letters of every month name
aux_cb['values'] = [countries[m][0:3] for m in range(4)]

# prevent typing a value
aux_cb['state'] = 'readonly'

# place the widget
#columnas_cb.pack(fill=None, side=LEFT, padx=0, pady=110)
aux_cb.grid(column=0, row=0, padx=0, pady=40)
aux_cb.current()
aux_cb.grid_forget()'''


'''
***************************************************************************
'''

columnas = StringVar()
columnas_cb = ttk.Combobox(window, textvariable=columnas, width=28)

# get first 3 letters of every month name
columnas_cb['values'] = [countries[m][0:1] for m in range(4)]

# prevent typing a value
columnas_cb['state'] = 'readonly'

# place the widget
#columnas_cb.pack(fill=None, side=LEFT, padx=0, pady=110)
columnas_cb.grid(column=5, row=5, padx=53, pady=145)
columnas_cb.current()


tipo_datos = StringVar()
tipoDatos_cb = ttk.Combobox(window, textvariable=tipo_datos, width=28)

# get first 3 letters of every month name
tipoDatos_cb['values'] = [countries[m][0:2] for m in range(4)]

# prevent typing a value
tipoDatos_cb['state'] = 'readonly'

# place the widget
tipoDatos_cb.grid(column=20, row=5, padx=110, pady=145)
tipoDatos_cb.current()


outliers = StringVar()
outliers_cb = ttk.Combobox(window, textvariable=outliers, width=28)

# get first 3 letters of every month name
outliers_cb['values'] = [countries[m][0:3] for m in range(4)]

# prevent typing a value
outliers_cb['state'] = 'readonly'

# place the widget
outliers_cb.grid(column=35, row=5, padx=45, pady=150)
outliers_cb.current()

'''
***************************************************************************
'''
cpu_columns = StringVar()
cpu_cb = ttk.Combobox(window, textvariable=cpu_columns, width=28)

# get first 3 letters of every month name
cpu_cb['values'] = [countries[m][0:4] for m in range(4)]

# prevent typing a value
cpu_cb['state'] = 'readonly'

# place the widget
cpu_cb.grid(column=5, row=6, padx=0, pady=0)
cpu_cb.current()


pid = StringVar()
pid_cb = ttk.Combobox(window, textvariable=pid, width=28)

# get first 3 letters of every month name
pid_cb['values'] = [countries[m][0:5] for m in range(4)]

# prevent typing a value
pid_cb['state'] = 'readonly'

# place the widget
pid_cb.grid(column=20, row=6, padx=0, pady=0)
pid_cb.current()

tid = StringVar()
tid_cb = ttk.Combobox(window, textvariable=tid, width=28)

# get first 3 letters of every month name
tid_cb['values'] = [countries[m][0:6] for m in range(4)]

# prevent typing a value
tid_cb['state'] = 'readonly'

# place the widget
tid_cb.grid(column=35, row=6, padx=45, pady=0)
tid_cb.current()


'''
***************************************************************************
'''
g_flops = StringVar()
gflops_cb = ttk.Combobox(window, textvariable=g_flops, width=28)

# get first 3 letters of every month name
gflops_cb['values'] = [countries[m][0:7] for m in range(4)]

# prevent typing a value
gflops_cb['state'] = 'readonly'

# place the widget
gflops_cb.grid(column=5, row=7, padx=0, pady=150)
gflops_cb.current()


rang_inicial = StringVar()
rangInicial_cb = ttk.Combobox(window, textvariable=rang_inicial, width=28)

# get first 3 letters of every month name
rangInicial_cb['values'] = [countries[m][0:8] for m in range(4)]

# prevent typing a value
rangInicial_cb['state'] = 'readonly'

# place the widget
rangInicial_cb.grid(column=20, row=7, padx=0, pady=150)
rangInicial_cb.current()

rang_final = StringVar()
rangFinal_cb = ttk.Combobox(window, textvariable=rang_final, width=28)

# get first 3 letters of every month name
rangFinal_cb['values'] = [countries[m][0:9] for m in range(4)]

# prevent typing a value
rangFinal_cb['state'] = 'readonly'

# place the widget
rangFinal_cb.grid(column=35, row=7, padx=45, pady=150)
rangFinal_cb.current()

'''
# Choosing selectmode as multiple
# for selecting multiple options
list = tk.Listbox(window, selectmode="multiple")

# Widget expands horizontally and
# vertically by assigning both to
# fill option
list.grid(column=21, row=7, padx=0, pady=150)

# Taking a list 'x' with the items
# as languages
x = ["C", "C++", "Java", "Python", "R",
     "Go", "Ruby", "JavaScript", "Swift"]

for each_item in range(len(x)):

    list.insert(tk.END, x[each_item])

    # coloring alternative lines of listbox
    list.itemconfig(each_item,
                    bg="yellow" if each_item % 2 == 0 else "cyan")'''

window.resizable(False, False)
window.mainloop()

# print(help(OptionMenu))
